---
title: "Class 14: RNAseq mini project"
author: "Yiyu"
format: pdf
toc: true
---

# Background 

The data for for hands-on session comes from GEO entry: GSE37704, which is associated with the following publication:

> Trapnell C, Hendrickson DG, Sauvageau M, Goff L et al. "Differential analysis of gene regulation at transcript resolution with RNA-seq". Nat Biotechnol 2013 Jan;31(1):46-53. PMID: 23222703

The authors report on differential analysis of lung fibroblasts in response to loss of the developmental transcription factor HOXA1. Their results and others indicate that HOXA1 is required for lung fibroblast and HeLa cell cycle progression. In particular their analysis show that "loss of HOXA1 results in significant expression level changes in thousands of individual transcripts, along with isoform switching events in key regulators of the cell cycle".

# Data Import

Reading in the counts and the metadata

```{r}
counts <- read.csv("GSE37704_featurecounts.csv", row.names = 1)
metadata <- read.csv("GSE37704_metadata.csv")
```

## Tidy and verify data 

> Q. How many genesa re in this dataset?

```{r}
nrow(counts)
```
> Q. How many control and knockdown experiments are there?

```{r}
table(metadata$condition)
```
> Q. Does the `metadata` match the `countdata`

```{r}
colnames(counts) 
```
```{r}
metadata$id
```
Does not match, counts has extra length column

### Fix countdata to match metadata

```{r}
newcounts <- counts[,-1]

```

```{r}
colnames(newcounts) == metadata$id
```

## Remove zero count genes 

```{r}
to.keep <- rowSums(newcounts) !=0
countData = newcounts[to.keep,]
head(countData)
```

# PCA quality control

We can use `prcomp()` function

```{r}
pc <- prcomp(t(countData), scale = T)
summary(pc)
```

## Make plot of PCA data

Color by "control" - blue and "knockdown" - red

```{r}
metadata$condition
mycols <- c(rep("blue", 3), rep("red",3))
mycols
```


```{r}
library(ggplot2)

ggplot(pc$x) +
  aes(PC1, PC2) +
  geom_point(col=mycols)
```

> Q. How many genes do we have left after filtering?

```{r}
nrow(countData)
```

# DESeq analysis

```{r}
#| message: false
library(DESeq2)
```

## Set up the DESeq input object

```{r}
dds <- DESeqDataSetFromMatrix(countData = countData,
                              colData = metadata,
                              design = ~condition)
```


## Run DESeq


```{r}
dds <- DESeq(dds)
```

## Extract results

```{r}
res <- results(dds)
head(res)
```

# Volcano plot

```{r}
mycols <- rep("darkgray", nrow(res))
mycols[res$log2FoldChange >= 2] <- "blue"
mycols[res$log2FoldChange <= -2] <- "blue"
mycols[ res$padj >= 0.05] <- "darkgray"
```


```{r}
ggplot(res) +
aes(log2FoldChange, -log(padj)) +
geom_point(col=mycols) +
labs(title = "Summary Volcano Plot") +
xlab( "log2(fold change)") +
ylab ("-log10(adjusted p-value)") +
geom_vline(xintercept = c(-2,2), col = "black", lty = 2) +
geom_hline (yintercept = -log(0.05), col = "black", lty =2)
```

# Add gene annotation

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
columns(org.Hs.eg.db)
```

```{r}
res$symbol = mapIds(org.Hs.eg.db,
                    keys=row.names(res), 
                    keytype="ENSEMBL",
                    column="SYMBOL",
                    multiVals="first")

res$entrez = mapIds(org.Hs.eg.db,
                    keys=row.names(res),
                    keytype="ENSEMBL",
                    column="ENTREZID",
                    multiVals="first")

head(res, 10)
```

# Save results

```{r}
write.csv(res, file = "class14results.csv")
```

# Pathway analysis

```{r}
#| message: false

library(pathview)
library(gage)
library(gageData)

```

## KEGG

```{r}
data(kegg.sets.hs)
```

```{r}
head(kegg.sets.hs, 1)
```
Make an input vector for `gage()` called `foldchanges` that has `names()` attribute set to ENTREZIDs

```{r}
foldchanges <- res$log2FoldChange
names(foldchanges) <- res$entrez
```

```{r}
keggres <- gage(foldchanges, gsets = kegg.sets.hs)
```

```{r}
attributes(keggres)
```
```{r}
head(keggres$less, 2)
```

```{r}
pathview(foldchanges, pathway.id = "hsa04110")
```
![](hsa04110.pathview.png) 

```{r}
pathview(foldchanges, pathway.id = "hsa03030")
```
![](hsa03030.pathview.png)

```{r}
head(keggres$greater, 2)
```

```{r}
pathview(foldchanges, pathway.id = "hsa04060")
```
![](hsa04060.pathview.png)

## GO Gene Ontology

```{r}
data(go.sets.hs)
data(go.subs.hs)

# Focus on Biological Process subset of GO
gobpsets = go.sets.hs[go.subs.hs$BP]

gobpres = gage(foldchanges, gsets=gobpsets)

```

```{r}
head(gobpres$less)
```

## Reactome 

We can use reactome via R or via their fancy new website interface. The web interface wants a set of ENTREZ ID values for your genes of interes.t Let's generate that.

```{r}
inds <- abs(res$log2FoldChange)>=2 & res$padj <= 0.05
top.genes <- res$entrez[inds]
```

```{r}
write.table(top.genes, file="top_genes.txt", row.names=FALSE, col.names=FALSE, quote=FALSE)
```

