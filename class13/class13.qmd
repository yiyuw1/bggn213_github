---
title: "class 13"
author: "Yiyu"
format: pdf
toc: true
---

In today's class we will analyze some published RNA-seq experiments where airway smooth muscle cells were treated with dexamethasone, a synthetic glucocorticoid steroid with anti-inflammatory effects (Himes et al. 2014)

We will use the **DESeq2** package for the heavy lifting in a little but but first let's read the data in and get to know how things work.

## Data Import

There are two dat sets that I need for this type of analysis:

-contData: the transcript abundances (e.g. read counts per gene)
-colData: metadata about the columns in countData (i.e. experimental setup)

```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <- read.csv("airway_metadata.csv")
```

> Q1. How many genes are in this dataset?

```{r}
nrow(counts)
```

> Q2. How many "control" experiments are there in the dataset?

```{r}
table(metadata$dex)
```
## Mean counts per condition

Let's find the average gene counts (i.e. rows) for control and treated conditions (i.e. columns)

-extract all "control" columns/experiments
-then find the row wise average for these columns



```{r}
control.inds <-  metadata$dex == "control"
control.counts <-  counts[,control.inds]
control.mean <-  rowMeans(control.counts)
```

Do the same to produce `treated.mean` 
```{r}
treated.inds <-  metadata$dex == "treated"
treated.counts <-  counts[,treated.inds]
treated.mean <-  rowMeans(treated.counts)
```

Let's store these mean values all in one data.frame called meancounts.

```{r}
meancounts <- data.frame(control.mean, treated.mean)
head(meancounts)
```
Make of plot of control vs. treated

```{r}
plot(meancounts)
```
Where are all of the genes??

In ggplot, can better see density of plot with low alpha.

```{r}
library(ggplot2)

ggplot(meancounts) +
  aes (control.mean, treated.mean) +
  geom_point(alpha = 0.3)
```

Data is heavily skewed, we can transform the plot to better see.

```{r}
plot(meancounts, log="xy")
```

```{r}
ggplot(meancounts) +
  aes (control.mean, treated.mean) +
  geom_point(alpha = 0.3) +
  scale_x_continuous(trans = "log2") +
  scale_y_continuous(trans = "log2")
```

## Log fold change

We most often work with log2 units - why? Because interprettaion is much more straight forward.
```{r}
log2(20/20)
```
```{r}
log2(20/40)
```
```{r}
log2(40/20)
```

Let's calculate the log2 fold change (`log2fc`) of treated/control for our data.

```{r}
meancounts$log2fc <- log2(meancounts$treated.mean / meancounts$control.mean)
```

There are some weird values in the log2fc column like -Inf and NaN all because I have zero count genes. I need to filter these out (i.e. remove them) before going any further

```{r}
to.keep <- rowSums(meancounts[,1:2] == 0) == 0
mycounts = meancounts[to.keep,]
```

>Q. How many non-zero genes do we have left?

```{r}
nrow(mycounts)
```
> Q. How many genes are "up" regulated at a log2fc > 2?

```{r}
sum (mycounts$log2fc > 2)
```

> Q. How many genes are "down" regulated with a log2fc < 2?

```{r}
sum (mycounts$log2fc < (-2))
```

> Q. Do you trust these results? Why or why not?

Not quite, we need to account for significance still.

To do this analysis properly we can use the bioConductor package **DESeq2**:

## DESeq analysis

```{r}
#| message: false
library(DESeq2)
```

Like most BioConductor packages DESeq wants it's input in a very particular format.

```{r}
dds <- DESeqDataSetFromMatrix(countData = counts,
                       colData = metadata,
                       design = ~dex)
```

```{r}
dds <- DESeq(dds)
```
```{r}
res <- results(dds)
head(res)
```

Save out results to CSV file:

```{r}
write.csv(res, file= "myresults.csv")
```


### Volcano Plot

Let's make a common summary plot of our results. Our main results are the log2fc and adjusted p-value.

```{r}
plot(res$log2FoldChange, res$padj)
```
We need to transform p-value axis because we're interested in the very low p-values, not any values with large p-values.

```{r}
plot(res$log2FoldChange, log(res$padj))
```
We are interested in the larger values (larger negative in the above plot). We tend to flip the y axis so that it's -log(p-value).

```{r}
plot(res$log2FoldChange, -log(res$padj))
```

This is our standard volcano plot. Let's plot it in ggplot to make it more interesting.We can use color to highlight the most important subset of transcripts with a log2FC > +2 and <-2 that have  a p-value <0.05. We will need a custom color vector for this `mycols` 

```{r}
mycols <- rep("black", nrow(res))
mycols[res$log2FoldChange >= 2] <- "blue"
mycols[res$log2FoldChange <= -2] <- "blue"
mycols[ res$padj >= 0.05] <- "black"
```


```{r}
ggplot(res) +
  aes(log2FoldChange, -log(padj)) +
  geom_point(col=mycols) +
  labs(title = "Summary Volcano Plot") +
  xlab( "log2 fold change") +
  ylab ("-log adjusted p-value") +
  geom_vline(xintercept = c(-2,2), col = "darkgray", lty = 2) +
  geom_hline (yintercept = -log(0.05), col = "darkgray", lty =2)
  theme_bw()
```
## Adding annotation data

At the minute all we know about the genes in ou dataset is their ENSEMBLE database id

```{r}
head(rownames(res))
```

We can use a set of BioConductor packages to map these ENSEMBLE ids to things like GENE SYMBOL, REFSEQ id, ENTREZ id etc. In other words, what each gene is called in different databases that I might want to use for further analysis.

I install these packages with `BiocManager::install()`

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```

The different formats that I can convert IDs between include:
```{r}
columns(org.Hs.eg.db)
```

We can use `mapIds()` function to do this "mapping"/conversion:

```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",   # The format of our genenames
                     column="SYMBOL",     # The new format we want to add
                     multiVals="first")

res$genename <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), 
                     keytype="ENSEMBL",   
                     column="GENENAME",   # The new format we want 
                     multiVals="first")

res$entrez <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), 
                     keytype="ENSEMBL",   
                     column="ENTREZID",   # The new format we want 
                     multiVals="first")

head(res)
```

```{r}
write.csv(res, file = "myresults_annotated.csv")
```

## Pathway Analysis

Let's use KEGG to see which pathways my gene sets over lap with - i.e. highlight the biology that may be influenced by the dex drug treatment.

We will use the following packages: `BiocManager::install(c("pathview", "gage", "gageData"))`

```{r}
library(pathview)
library(gage)
library(gageData)
data(kegg.sets.hs)

```
The **gage** function wants as input a "named vector of importance" 

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```

```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

```{r}
head(keggres$less)
```
We can have a quick look at one of the highlighted pathways e.g. hsa05310

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310")
```
![](hsa05310.pathview.png) 
